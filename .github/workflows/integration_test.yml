name: Integration Test

on:
  push:
    branches: [main, master]
  pull_request:
    branches: ['*']

jobs:
  integration:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: caldav
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
      ldap:
        image: osixia/openldap:1.5.0
        env:
          LDAP_ORGANISATION: "Example Inc"
          LDAP_DOMAIN: "example.com"
          LDAP_ADMIN_PASSWORD: admin
        ports:
          - 389:389
        options: >-
          --health-cmd="echo ok"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.x"

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ldap-utils netcat-traditional

      - name: Wait for Postgres
        run: |
          for i in $(seq 1 60); do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres && exit 0
            echo "waiting for Postgres..."
            sleep 1
          done
          echo "Postgres not ready" >&2
          exit 1

      - name: Seed Postgres schema
        run: |
          psql "postgres://postgres:postgres@127.0.0.1:5432/caldav?sslmode=disable" -f internal/storage/postgres/schema.sql

      - name: Wait for LDAP
        run: |
          for i in $(seq 1 60); do
            nc -z 127.0.0.1 389 && exit 0
            echo "waiting for LDAP..."
            sleep 1
          done
          echo "LDAP not ready" >&2
          exit 1

      - name: Seed OpenLDAP base data (idempotent)
        run: |
          # Verify bind works
          for i in $(seq 1 60); do
            if ldapwhoami -x -H ldap://127.0.0.1:389 -D "cn=admin,dc=example,dc=com" -w admin >/dev/null 2>&1; then
              break
            fi
            echo "waiting for LDAP bind..."
            sleep 1
          done
          # Idempotent add: continue on "already exists"
          ldapmodify -a -c -x \
            -H ldap://127.0.0.1:389 \
            -D "cn=admin,dc=example,dc=com" \
            -w admin \
            -f test/fixtures/ldap/base.ldif || true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build test runner image
        run: |
          docker build -f Dockerfile.test -t ldap-dav-test .

      - name: Bootstrap calendars (postgres)
        run: |
          docker run --rm --network host \
            -e STORAGE_TYPE=postgres \
            -e PG_URL="postgres://postgres:postgres@127.0.0.1:5432/caldav?sslmode=disable" \
            -e HTTP_BASE_PATH="/dav" \
            ldap-dav-test \
            ldap-dav-bootstrap -owner alice -uri personal -display "Alice Personal"
          docker run --rm --network host \
            -e STORAGE_TYPE=postgres \
            -e PG_URL="postgres://postgres:postgres@127.0.0.1:5432/caldav?sslmode=disable" \
            -e HTTP_BASE_PATH="/dav" \
            ldap-dav-test \
            ldap-dav-bootstrap -owner bob -uri team -display "Team Calendar"

      - name: Run integration tests (postgres backend)
        env:
          STORAGE_TYPE: postgres
          PG_URL: postgres://postgres:postgres@127.0.0.1:5432/caldav?sslmode=disable
          LDAP_URL: ldap://127.0.0.1:389
          LDAP_BIND_DN: cn=admin,dc=example,dc=com
          LDAP_BIND_PASSWORD: admin
          LDAP_USER_BASE_DN: ou=People,dc=example,dc=com
          LDAP_GROUP_BASE_DN: ou=Groups,dc=example,dc=com
          AUTH_BASIC: "true"
          AUTH_BEARER: "false"
          HTTP_BASE_PATH: /dav
          HTTP_ADDR: :8081
        run: |
          docker run --rm --network host \
            -e STORAGE_TYPE \
            -e PG_URL \
            -e LDAP_URL \
            -e LDAP_BIND_DN \
            -e LDAP_BIND_PASSWORD \
            -e LDAP_USER_BASE_DN \
            -e LDAP_GROUP_BASE_DN \
            -e AUTH_BASIC \
            -e AUTH_BEARER \
            -e HTTP_BASE_PATH \
            -e HTTP_ADDR \
            ldap-dav-test \
            go test ./test/integration -v -run TestIntegration

      - name: Bootstrap calendars (filestore)
        run: |
          docker run --rm --network host \
            -e STORAGE_TYPE=filestore \
            -e FILE_ROOT="/tmp/ldap-dav-data" \
            -e HTTP_BASE_PATH="/dav" \
            -v /tmp/ldap-dav-data:/tmp/ldap-dav-data \
            ldap-dav-test \
            ldap-dav-bootstrap -owner alice -uri personal -display "Alice Personal"
          docker run --rm --network host \
            -e STORAGE_TYPE=filestore \
            -e FILE_ROOT="/tmp/ldap-dav-data" \
            -e HTTP_BASE_PATH="/dav" \
            -v /tmp/ldap-dav-data:/tmp/ldap-dav-data \
            ldap-dav-test \
            ldap-dav-bootstrap -owner bob -uri team -display "Team Calendar"

      - name: Run integration tests (filestore backend)
        env:
          STORAGE_TYPE: filestore
          FILE_ROOT: /tmp/ldap-dav-data
          LDAP_URL: ldap://127.0.0.1:389
          LDAP_BIND_DN: cn=admin,dc=example,dc=com
          LDAP_BIND_PASSWORD: admin
          LDAP_USER_BASE_DN: ou=People,dc=example,dc=com
          LDAP_GROUP_BASE_DN: ou=Groups,dc=example,dc=com
          AUTH_BASIC: "true"
          AUTH_BEARER: "false"
          HTTP_BASE_PATH: /dav
          HTTP_ADDR: :8082
        run: |
          docker run --rm --network host \
            -e STORAGE_TYPE \
            -e FILE_ROOT \
            -e LDAP_URL \
            -e LDAP_BIND_DN \
            -e LDAP_BIND_PASSWORD \
            -e LDAP_USER_BASE_DN \
            -e LDAP_GROUP_BASE_DN \
            -e AUTH_BASIC \
            -e AUTH_BEARER \
            -e HTTP_BASE_PATH \
            -e HTTP_ADDR \
            -v /tmp/ldap-dav-data:/tmp/ldap-dav-data \
            ldap-dav-test \
            go test ./test/integration -v -run TestIntegration
